# Copyright Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# ================================================================================
#                  Regression test list format
# --------------------------------------------------------------------------------
# test            : Assembly test name
# description     : Description of this test
# gen_opts        : Instruction generator options
# iterations      : Number of iterations of this test
# no_iss          : Enable/disable ISS simulator (Optional)
# gen_test        : Test name used by the instruction generator
# asm_tests       : Path to directed, hand-coded assembly test file or directory
# rtl_test        : RTL simulation test name
# cmp_opts        : Compile options passed to the instruction generator
# sim_opts        : Simulation options passed to the instruction generator
# no_post_compare : Enable/disable comparison of trace log and ISS log (Optional)
# compare_opts    : Options for the RTL & ISS trace comparison
# gcc_opts        : gcc compile options
# --------------------------------------------------------------------------------

- import: <riscv_dv_root>/target/rv64imc/testlist.yaml


- test: riscv_machine_mode_rand_test
  description: >
    Machine mode random instruction test
  iterations: 100
  gen_test: riscv_instr_base_test
  gen_opts: >
    +instr_cnt=10000
    +num_of_sub_program=5
    +directed_instr_0=riscv_load_store_rand_instr_stream,4
    +directed_instr_1=riscv_loop_instr,4
    +directed_instr_2=riscv_hazard_instr_stream,4
    +directed_instr_3=riscv_load_store_hazard_instr_stream,4
    +directed_instr_4=riscv_multi_page_load_store_instr_stream,4
    +directed_instr_5=riscv_mem_region_stress_test,4
    +directed_instr_6=riscv_jal_instr,4
    +directed_instr_7=riscv_int_numeric_corner_stream,4
    +directed_instr_8=riscv_zfa_numeric_corner_stream,20
    +illegal_instr_ratio=4
    +hint_instr_ratio=5
    +no_ebreak=0
    +boot_mode=m
  rtl_test: core_base_test

- test: riscv_privileged_mode_rand_test
  description: >
    Random previliged mode test
  iterations: 2
  gen_test: riscv_instr_base_test
  gen_opts: >
    +instr_cnt=10000
    +num_of_sub_program=5
  rtl_test: core_base_test

# TODO: Only enable booting into U-mode for now, as OVPsim doesn't support some debug CSRs
- test: riscv_invalid_csr_test
  description: >
    Boot core into random privileged mode and generate csr accesses to invalid CSRs (at a higher priv mode)
  iterations: 2
  gen_test: riscv_rand_instr_test
  gen_opts: >
    +instr_cnt=6000
    +num_of_sub_program=0
    +enable_access_invalid_csr_level=1
    +boot_mode=u
  rtl_test: core_invalid_csr_test
  sim_opts: >
    +require_signature_addr=1
    +signature_addr=3d0a000

# TODO: Re-enable this test after all the data/instruction page organization changes are done
- test: riscv_page_table_exception_test
  description: >
    Test random page table exception handling. An exception handling routine is
    designed to fix the page table error and resume execution.
  iterations: 0
  gen_test: riscv_rand_instr_test
  gen_opts: >
    +enable_page_table_exception=1
  rtl_test: core_base_test

- test: riscv_sfence_exception_test
  description: >
    Random instruction test with S.FENCE exceptions
  iterations: 2
  gen_test: riscv_rand_instr_test
  gen_opts: >
    +allow_sfence_exception=1
  rtl_test: core_base_test

- test: riscv_amo_test
  description: >
    RISC-V atomic instruction extension test
  iterations: 2
  gen_test: riscv_rand_instr_test
  gen_opts: >
    +instr_cnt=5000
    +num_of_sub_program=5
    +directed_instr_0=riscv_lr_sc_instr_stream,10
    +directed_instr_1=riscv_amo_instr_stream,10
  rtl_test: core_base_test

- test: riscv_floating_point_arithmetic_test
  description: >
    Enable floating point instructions
  gen_opts: >
    +instr_cnt=10000
    +num_of_sub_program=0
    +no_fence=1
    +no_data_page=1
    +no_branch_jump=1
    +enable_floating_point=1
    +boot_mode=m
  iterations: 3
  gen_test: riscv_instr_base_test
  rtl_test: core_base_test

- test: riscv_floating_point_rand_test
  description: >
    Enable floating point instructions
  gen_opts: >
    +enable_floating_point=1
    +instr_cnt=10000
    +num_of_sub_program=5
    +directed_instr_0=riscv_load_store_rand_instr_stream,4
    +directed_instr_1=riscv_loop_instr,4
    +directed_instr_2=riscv_multi_page_load_store_instr_stream,4
    +directed_instr_3=riscv_mem_region_stress_test,4
    +directed_instr_4=riscv_jal_instr,4
  iterations: 3
  gen_test: riscv_instr_base_test
  rtl_test: core_base_test

- test: riscv_floating_point_mmu_stress_test
  description: >
    Test with different patterns of load/store instructions, stress test MMU
    operations.
  iterations: 3
  gen_test: riscv_instr_base_test
  gen_opts: >
    +instr_cnt=5000
    +num_of_sub_program=5
    +enable_floating_point=1
    +directed_instr_0=riscv_load_store_rand_instr_stream,40
    +directed_instr_1=riscv_load_store_hazard_instr_stream,40
    +directed_instr_2=riscv_multi_page_load_store_instr_stream,10
    +directed_instr_3=riscv_mem_region_stress_test,10
  rtl_test: core_base_test

## New (taken from ibex)
- test: riscv_bitmanip_full_test
  description: >
    Random instruction test with supported B extension instructions in full configuration
  iterations: 1
  gen_test: riscv_rand_instr_test
  gen_opts: >
    +enable_zba_extension=1
    +enable_zbb_extension=1
    +enable_zbc_extension=1
    +enable_zbs_extension=1
    +enable_b_extension=1
    +enable_bitmanip_groups=zba,zbb,zbs,zbc
  rtl_test: core_base_test

- test: riscv_delegate_interrupt_test
  description: >
    Random instruction test with complete interrupt handling
  iterations: 2
  gen_test: riscv_rand_instr_test
  gen_opts: >
    +enable_timer_irq=1
    +enable_interrupt=1
    +hint_instr_ratio=10
    +enable_floating_point=1
    +num_of_sub_program=10
    +boot_mode=s
    +enable_floating_point=1
    +directed_instr_0=riscv_load_store_rand_instr_stream,40
    +directed_instr_1=riscv_load_store_hazard_instr_stream,40
    +directed_instr_2=riscv_multi_page_load_store_instr_stream,10
    +directed_instr_3=riscv_mem_region_stress_test,10
    +require_signature_addr=1
    +signature_addr=3d0a000
    +enable_irq_seq=1
    +enable_illegal_csr_instruction=1
    +illegal_instr_ratio=10
    +force_m_delegation=1  
    +no_delegation=0
  rtl_test: core_base_test
  compare_opts: >
    +compare_final_value_only=1

- test: riscv_no_delegate_interrupt_test
  description: >
    Random instruction test with complete interrupt handling
    Does not delegate interrupts to S mode
  iterations: 2
  gen_test: riscv_rand_instr_test
  gen_opts: >
    +enable_timer_irq=1
    +enable_interrupt=1
    +hint_instr_ratio=10
    +enable_floating_point=1
    +num_of_sub_program=10
    +boot_mode=s
    +enable_floating_point=1
    +directed_instr_0=riscv_load_store_rand_instr_stream,40
    +directed_instr_1=riscv_load_store_hazard_instr_stream,40
    +directed_instr_2=riscv_multi_page_load_store_instr_stream,10
    +directed_instr_3=riscv_mem_region_stress_test,10
    +require_signature_addr=1
    +signature_addr=3d0a000
    +enable_irq_seq=1
    +enable_illegal_csr_instruction=1
    +illegal_instr_ratio=10
  rtl_test: core_base_test
  compare_opts: >
    +compare_final_value_only=1
    #+enable_illegal_csr_instruction=1
    
- test: riscv_legal_interrupt_test
  description: >
    Random instruction test with complete interrupt handling
    Do not inject any illegal instructions

  iterations: 2
  gen_test: riscv_rand_instr_test
  gen_opts: >
    +enable_timer_irq=1
    +enable_interrupt=1
    +hint_instr_ratio=10
    +enable_floating_point=1
    +num_of_sub_program=10
    +boot_mode=s
    +enable_floating_point=1
    +directed_instr_0=riscv_load_store_rand_instr_stream,40
    +directed_instr_1=riscv_load_store_hazard_instr_stream,40
    +directed_instr_2=riscv_multi_page_load_store_instr_stream,10
    +directed_instr_3=riscv_mem_region_stress_test,10
    +require_signature_addr=1
    +signature_addr=3d0a000
    +enable_irq_seq=1
    +force_m_delegation=1  
    +no_delegation=0
  rtl_test: core_base_test
  compare_opts: >
    +compare_final_value_only=1

    #- test: riscv_epmp_mml_test
    #  desc: >
    #    An enhanced PMP machine mode lockdown test - initialization and main
    #    regions are set to execute only in both M and U modes. All other regions
    #    are set to read/write only. Exceptions when reading/writing code or
    #    executing data. Randomize mstatus.mprv.
    #  iterations: 2
    #  gen_test: riscv_rand_instr_test
    #  gen_opts: >
    #    +instr_cnt=6000
    #    +set_mstatus_mprv=1
    #    +pmp_max_offset=00024000
    #    +pmp_region_0=L:1,X:0,W:1,R:0
    #    +pmp_region_1=L:1,X:0,W:1,R:0
    #    +pmp_region_2=L:0,X:1,W:1,R:0
    #    +pmp_region_3=L:0,X:1,W:1,R:0
    #    +pmp_region_4=L:0,X:1,W:1,R:0
    #    +pmp_region_5=L:0,X:1,W:1,R:0
    #    +pmp_region_6=L:0,X:1,W:1,R:0
    #    +pmp_region_7=L:0,X:1,W:1,R:0
    #    +pmp_region_8=L:0,X:1,W:1,R:0
    #    +pmp_region_9=L:0,X:1,W:1,R:0
    #    +pmp_region_10=L:0,X:1,W:1,R:0
    #    +pmp_region_11=L:0,X:1,W:1,R:0
    #    +pmp_region_12=L:0,X:1,W:1,R:0
    #    +pmp_region_13=L:0,X:1,W:1,R:0
    #    +pmp_region_14=L:0,X:1,W:1,R:0
    #    +pmp_region_15=L:0,X:1,W:1,R:0
    #    +enable_write_pmp_csr=1
    #    +mseccfg=MML:1,MMWP:0,RLB:0
    #  rtl_test: core_base_test
    #
    #- test: riscv_epmp_mml_execute_only_test
    #  desc: >
    #    An enhanced PMP machine mode lockdown test - all PMP regions are set to
    #    execute only. Exception is expected on any store or load. Randomize
    #    mstatus.mprv.
    #  iterations: 2
    #  gen_test: riscv_rand_instr_test
    #  gen_opts: >
    #    +instr_cnt=6000
    #    +set_mstatus_mprv=1
    #    +pmp_max_offset=00024000
    #    +pmp_region_0=L:1,X:0,W:1,R:0
    #    +pmp_region_1=L:1,X:0,W:1,R:0
    #    +pmp_region_2=L:1,X:0,W:1,R:0
    #    +pmp_region_3=L:1,X:0,W:1,R:0
    #    +pmp_region_4=L:1,X:0,W:1,R:0
    #    +pmp_region_5=L:1,X:0,W:1,R:0
    #    +pmp_region_6=L:1,X:0,W:1,R:0
    #    +pmp_region_7=L:1,X:0,W:1,R:0
    #    +pmp_region_8=L:1,X:0,W:1,R:0
    #    +pmp_region_9=L:1,X:0,W:1,R:0
    #    +pmp_region_10=L:1,X:0,W:1,R:0
    #    +pmp_region_11=L:1,X:0,W:1,R:0
    #    +pmp_region_12=L:1,X:0,W:1,R:0
    #    +pmp_region_13=L:1,X:0,W:1,R:0
    #    +pmp_region_14=L:1,X:0,W:1,R:0
    #    +pmp_region_15=L:1,X:0,W:1,R:0
    #    +enable_write_pmp_csr=1
    #    +mseccfg=MML:1,MMWP:0,RLB:0
    #  rtl_test: core_base_test

## New (taken from ibex)
#- test: riscv_pmp_disable_all_regions_test
#  desc: >
#    Disable all permissions from PMP regions, randomize the boot mode,
#    and randomize mstatus.mprv.
#    Expect that all appropriate faults are taken, and that the core
#    finishes executing successfully.
#  iterations: 2
#  gen_test: riscv_rand_instr_test
#  gen_opts: >
#    +instr_cnt=6000
#    +set_mstatus_mprv=1
#    +pmp_max_offset=00024000
#    +pmp_region_1=X:0,W:0,R:0
#    +pmp_region_2=X:0,W:0,R:0
#    +pmp_region_3=X:0,W:0,R:0
#    +pmp_region_4=X:0,W:0,R:0
#    +pmp_region_5=X:0,W:0,R:0
#    +pmp_region_6=X:0,W:0,R:0
#    +pmp_region_7=X:0,W:0,R:0
#    +pmp_region_8=X:0,W:0,R:0
#    +pmp_region_9=X:0,W:0,R:0
#    +pmp_region_10=X:0,W:0,R:0
#    +pmp_region_11=X:0,W:0,R:0
#    +pmp_region_12=X:0,W:0,R:0
#    +pmp_region_13=X:0,W:0,R:0
#    +pmp_region_14=X:0,W:0,R:0
#    +pmp_region_15=X:0,W:0,R:0
#    +enable_write_pmp_csr=1
#  rtl_test: core_base_test
#  
#  
# - test: riscv_pmp_out_of_bounds_test
#  desc: >
#    Default PMP settings - enable all regions with full permissions.
#    Randomize mstatus.mprv and the boot mode.
#    Insert streams of memory instructions that access addresses out of PMP boundaries.
#  iterations: 2
#  gen_test: riscv_rand_instr_test
#  gen_opts: >
#    +instr_cnt=6000
#    +set_mstatus_mprv=1
#    +pmp_max_offset=00024000
#    +enable_write_pmp_csr=1
#    +directed_instr_0=riscv_load_store_rand_addr_instr_stream,50
#  rtl_test: core_base_test
#  
#  
#  - test: riscv_debug_single_step_test
#  description: >
#    Randomly assert debug_req_i, and set dcsr.step to make ibex execute one isntruction and then re-enter debug mode
#  iterations: 15
#  gen_test: riscv_instr_base_test
#  gen_opts: >
#    +require_signature_addr=1
#    +signature_addr=3d0a000
#    +gen_debug_section=1
#    +no_ebreak=1
#    +no_branch_jump=0
#    +instr_cnt=10000
#    +no_csr_instr=1
#    +no_fence=1
#    +num_of_sub_program=2
#    +randomize_csr=1
#    +enable_debug_single_step=1
#  rtl_test: core_ibex_debug_single_step_test
#  sim_opts: >
#    +require_signature_addr=1
#    +signature_addr=3d0a000
#    +max_interval=1500
#    +enable_debug_seq=1
#  compare_opts:
#    compare_final_value_only: 1
#    verbose: 1
